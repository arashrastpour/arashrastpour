
import numpy as np
from collections import defaultdict


def load_rating_data(data_path, n_users, n_movies):
    """
    Load rating data from file and also return the number of ratings for each movie and movie_id index mapping
    @param data_path: path of the rating data file
    @param n_users: number of users
    @param n_movies: number of movies that have ratings
    @return: rating data in the numpy array of [user, movie]; movie_n_rating, {movie_id: number of ratings};
             movie_id_mapping, {movie_id: column index in rating data}
    """
    data = np.zeros([n_users, n_movies], dtype=np.float32)
    movie_id_mapping = {}
    movie_n_rating = defaultdict(int)
    with open(data_path, 'r') as file:
        for line in file.readlines()[1:]:
            user_id, movie_id, rating, _ = line.split("::")
            user_id = int(user_id) - 1
            if movie_id not in movie_id_mapping:
                movie_id_mapping[movie_id] = len(movie_id_mapping)
            rating = int(rating)
            data[user_id, movie_id_mapping[movie_id]] = rating
            if rating > 0:
                movie_n_rating[movie_id] += 1
    return data, movie_n_rating, movie_id_mapping

def display_distribution(data):
    values, counts = np.unique(data, return_counts=True)
    for value, count in zip(values, counts):
        print(f'Number of rating {int(value)}: {count}')



if __name__ == '__main__':
    data_path = 'ml-1m/ratings.dat'
    n_users = 6040
    n_movies = 3706
    data, movie_n_rating, movie_id_mapping = load_rating_data(data_path, n_users, n_movies)

    display_distribution(data)

    movie_id_most, n_rating_most = sorted(movie_n_rating.items(), key=lambda d: d[1], reverse=True)[0]
    print(f'Movie ID {movie_id_most} has {n_rating_most} ratings.')

    X_raw = np.delete(data, movie_id_mapping[movie_id_most], axis=1)
    Y_raw = data[:, movie_id_mapping[movie_id_most]]

    X = X_raw[Y_raw > 0]
    Y = Y_raw[Y_raw > 0]

    print('Shape of X:', X.shape)
    print('Shape of Y:', Y.shape)

    display_distribution(Y)

    recommend = 3
    Y[Y <= recommend] = 0
    Y[Y > recommend] = 1

    n_pos = (Y == 1).sum()
    n_neg = (Y == 0).sum()
    print(f'{n_pos} positive samples and {n_neg} negative samples.')

    from sklearn.model_selection import train_test_split
    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

    print(len(Y_train), len(Y_test))

    from sklearn.naive_bayes import MultinomialNB
    clf = MultinomialNB(alpha=1.0, fit_prior=True)
    clf.fit(X_train, Y_train)

    prediction_prob = clf.predict_proba(X_test)
    print(prediction_prob[0:10])

    prediction = clf.predict(X_test)
    print(prediction[:10])

    accuracy = clf.score(X_test, Y_test)
    print(f'The accuracy is: {accuracy*100:.1f}%')

    from sklearn.metrics import confusion_matrix
    print(confusion_matrix(Y_test, prediction, labels=[0, 1]))

    from sklearn.metrics import precision_score, recall_score, f1_score

    precision_score(Y_test, prediction, pos_label=1)
    recall_score(Y_test, prediction, pos_label=1)
    f1_score(Y_test, prediction, pos_label=1)

    f1_score(Y_test, prediction, pos_label=0)

    from sklearn.metrics import classification_report
    report = classification_report(Y_test, prediction)
    print(report)


    pos_prob = prediction_prob[:, 1]

    thresholds = np.arange(0.0, 1.1, 0.05)
    true_pos, false_pos = [0]*len(thresholds), [0]*len(thresholds)
    for pred, y in zip(pos_prob, Y_test):
        for i, threshold in enumerate(thresholds):
            if pred >= threshold:
                if y == 1:
                    true_pos[i] += 1
                else:
                    false_pos[i] += 1
            else:
                break

    n_pos_test = (Y_test == 1).sum()
    n_neg_test = (Y_test == 0).sum()
    true_pos_rate = [tp / n_pos_test for tp in true_pos]
    false_pos_rate = [fp / n_neg_test for fp in false_pos]


    import matplotlib.pyplot as plt
    plt.figure()
    lw = 2
    plt.plot(false_pos_rate, true_pos_rate, color='darkorange', lw=lw)
    plt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')
    plt.xlim([0.0, 1.0])
    plt.ylim([0.0, 1.05])
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver Operating Characteristic')
    plt.legend(loc="lower right")
    plt.show()


    from sklearn.metrics import roc_auc_score
    print(roc_auc_score(Y_test, pos_prob))


    from sklearn.model_selection import StratifiedKFold
    k = 5
    k_fold = StratifiedKFold(n_splits=k, random_state=42)

    smoothing_factor_option = [1, 2, 3, 4, 5, 6]
    fit_prior_option = [True, False]
    auc_record = {}

    for train_indices, test_indices in k_fold.split(X, Y):
        X_train, X_test = X[train_indices], X[test_indices]
        Y_train, Y_test = Y[train_indices], Y[test_indices]
        for alpha in smoothing_factor_option:
            if alpha not in auc_record:
                auc_record[alpha] = {}
            for fit_prior in fit_prior_option:
                clf = MultinomialNB(alpha=alpha, fit_prior=fit_prior)
                clf.fit(X_train, Y_train)
                prediction_prob = clf.predict_proba(X_test)
                pos_prob = prediction_prob[:, 1]
                auc = roc_auc_score(Y_test, pos_prob)
                auc_record[alpha][fit_prior] = auc + auc_record[alpha].get(fit_prior, 0.0)


    print('smoothing  fit prior  auc')
    for smoothing, smoothing_record in auc_record.items():
        for fit_prior, auc in smoothing_record.items():
            print(f'    {smoothing}        {fit_prior}    {auc/k:.5f}')


    clf = MultinomialNB(alpha=2.0, fit_prior=False)
    clf.fit(X_train, Y_train)

    pos_prob = clf.predict_proba(X_test)[:, 1]
    print('AUC with the best model:', roc_auc_score(Y_test, pos_prob))
 111 changes: 111 additions & 0 deletions111  
chapter2/naive_bayes.py
@@ -0,0 +1,111 @@


import numpy as np


def get_label_indices(labels):
    """
    Group samples based on their labels and return indices
    @param labels: list of labels
    @return: dict, {class1: [indices], class2: [indices]}
    """
    from collections import defaultdict
    label_indices = defaultdict(list)
    for index, label in enumerate(labels):
        label_indices[label].append(index)
    return label_indices

def get_prior(label_indices):
    """
    Compute prior based on training samples
    @param label_indices: grouped sample indices by class
    @return: dictionary, with class label as key, corresponding prior as the value
    """
    prior = {label: len(indices) for label, indices in label_indices.items()}
    total_count = sum(prior.values())
    for label in prior:
        prior[label] /= total_count
    return prior

def get_likelihood(features, label_indices, smoothing=0):
    """
    Compute likelihood based on training samples
    @param features: matrix of features
    @param label_indices: grouped sample indices by class
    @param smoothing: integer, additive smoothing parameter
    @return: dictionary, with class as key, corresponding conditional probability P(feature|class) vector as value
    """
    likelihood = {}
    for label, indices in label_indices.items():
        likelihood[label] = features[indices, :].sum(axis=0) + smoothing
        total_count = len(indices)
        likelihood[label] = likelihood[label] / (total_count + 2 * smoothing)
    return likelihood

def get_posterior(X, prior, likelihood):
    """
    Compute posterior of testing samples, based on prior and likelihood
    @param X: testing samples
    @param prior: dictionary, with class label as key, corresponding prior as the value
    @param likelihood: dictionary, with class label as key, corresponding conditional probability vector as value
    @return: dictionary, with class label as key, corresponding posterior as value
    """
    posteriors = []
    for x in X:
        # posterior is proportional to prior * likelihood
        posterior = prior.copy()
        for label, likelihood_label in likelihood.items():
            for index, bool_value in enumerate(x):
                posterior[label] *= likelihood_label[index] if bool_value else (1 - likelihood_label[index])
        # normalize so that all sums up to 1
        sum_posterior = sum(posterior.values())
        for label in posterior:
            if posterior[label] == float('inf'):
                posterior[label] = 1.0
            else:
                posterior[label] /= sum_posterior
        posteriors.append(posterior.copy())
    return posteriors



if __name__ == '__main__':

    X_train = np.array([
        [0, 1, 1],
        [0, 0, 1],
        [0, 0, 0],
        [1, 1, 0]])

    Y_train = ['Y', 'N', 'Y', 'Y']

    X_test = np.array([[1, 1, 0]])

    label_indices = get_label_indices(Y_train)
    print('label_indices:\n', label_indices)

    prior = get_prior(label_indices)
    print('Prior:', prior)

    smoothing = 1
    likelihood = get_likelihood(X_train, label_indices, smoothing)
    print('Likelihood:\n', likelihood)


    posterior = get_posterior(X_test, prior, likelihood)
    print('Posterior:\n', posterior)


    from sklearn.naive_bayes import BernoulliNB
    clf = BernoulliNB(alpha=1.0, fit_prior=True)
    clf.fit(X_train, Y_train)

    pred_prob = clf.predict_proba(X_test)
    print('[scikit-learn] Predicted probabilities:\n', pred_prob)

    pred = clf.predict(X_test)
    print('[scikit-learn] Prediction:', pred)
